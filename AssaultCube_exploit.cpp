#include <iostream>
#include <string>
#include <Windows.h>

using namespace std;



void _nop(PVOID address, int bytes)
{
	DWORD current;
	DWORD old;
	VirtualProtect(address, bytes, PAGE_EXECUTE_READWRITE, &current);
	memset(address, 0x90, bytes);
	VirtualProtect(address, bytes, current, &old);

}

DWORD addie = 0x4637E9;

unsigned char szPatch[2] = { 0xFF, 0x06};

void memcpy_s(PVOID address, char * val, int bytes)
{
	DWORD d, ds;
	VirtualProtect(address, bytes, PAGE_EXECUTE_READWRITE, &d);
	memcpy(address, val, bytes);
	VirtualProtect(address, bytes, d, &ds);
}


void GetWindow()
{
	DWORD pid;
	DWORD ammoAddie = 0x46368C;
	int value = 0;
	HWND hWnd = FindWindow(0, "AssaultCube");

	GetWindowThreadProcessId(hWnd, &pid);
	HANDLE pHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);

	ReadProcessMemory(pHandle, (void*)ammoAddie, &value, sizeof(value), 0);
	cout << value << endl;
}

void GetWindowTwo(PVOID address, int bytes)
{
	DWORD current;
	DWORD old;
	VirtualProtect(address, bytes, PAGE_EXECUTE_READWRITE, &current);
	memset(address, 0x90, bytes);
	VirtualProtect(address, bytes, current, &old);


}




void console_activate()
{
	FILE *pFile = nullptr;

	AllocConsole();
	freopen_s(&pFile, "CONOUT$", "w", stdout);
	



}

int main()
{

	//Activation!!!!!!!!!!!!!!!!!!!!!
	console_activate();

	while (true)
	{
		if (GetAsyncKeyState(VK_HOME))
		{
			//MessageBoxA(0, TEXT("Work mofo"), TEXT("Window"), NULL);
			_nop((PVOID)0x4637E9,2);
			cout << "Activating nop cheat" << endl;

		}
		else if (GetAsyncKeyState(VK_NUMPAD9))
		{
			int value = 0;
			DWORD ammoAddie = 0x42444B;
			DWORD hModule = GetCurrentProcessId();
			HANDLE hHandle = OpenProcess(PROCESS_ALL_ACCESS, false, hModule);
			ReadProcessMemory(hHandle, &ammoAddie, &value, sizeof(value), 0);
			cout << value << endl;

		}
		else if (GetAsyncKeyState(VK_NUMPAD8))
		{
			
			memcpy_s((PVOID*)addie,(char*)szPatch, 2);

		


		}
		Sleep(1000);
	}

}

BOOL APIENTRY DllMain(HMODULE Module, DWORD Reason, void* Reserved)
{
	switch (Reason)
	{
	case DLL_PROCESS_ATTACH:
		DisableThreadLibraryCalls(Module);
		CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)main, NULL, NULL, NULL);
		break;
	case DLL_PROCESS_DETACH:
		break;
	default: break;
	}

	return TRUE;
}
